import Head from 'next/head'
import { useRouter } from 'next/router'
import Link from 'next/link';
import styles from '../styles/Home.module.css'

import client from '../apollo-client';
import {GET_ARTICLES, GET_ARTICLE} from "../graphql/Queries";

/*
* "getStaticPaths" fetches ALL urls that should be PRE-RENDERED at BUILD time.
*
* In case that we have lots of pages, we should not have them on this list,
* otherwise it will incrementally slow-down our build times.
*
* "fallback: false" allows the route to fall-through the catch all route "[...tags]", in
* case "getStaticProps" fails to get a valid page.
*/
export async function getStaticPaths() {

  console.log("getStaticPaths was called");
  const {data} = await client.query(GET_ARTICLE("article-1"));

  return {
    paths: [{params:{slug: data.article.slug}}],
    fallback: "blocking"
  };

    /*return {
        paths: data.articles.map(a => {return {params:{slug: a.slug}}}),
        fallback: false
    };*/
}

/*
* 
* 
*/
export async function getStaticProps(ctx) {
  // Fetching the Page data goes here

  const {data} = await client.query(GET_ARTICLE(ctx.params.slug));
  
  console.log(data)
  if(!data.article) {
    console.log("article == null");
    // If page has been deleted in the CMS, it redirects to homepage until re-deployment
    // afterwards it falls through to the "[...tags]" catch-all route
    return {}
    /*return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    };*/
  }

  return {
    props: data, 
    revalidate: 2
  };
}

export default function StaticPages({article}) {

  if(!article) return;

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
          <Link href='/'><button>{"<--"} Home</button></Link>
          <h2>Dynamic Article Page Route - slug: {article.slug} - id: {article.id}</h2>
        <h1 className={styles.title}>
          {article.title}
        </h1>
        <p>{article.content}</p>
      </main>
    </div>
  )
}
